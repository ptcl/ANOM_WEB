'use client'

import { useEffect, useState } from 'react'
import { useCompleteDashboard, useCompleteAuth } from '@/hooks/useOptimizedData'

export default function DashboardPage() {
    // ‚úÖ UTILISATION DU HOOK OPTIMIS√â - R√©cup√®re seulement les donn√©es n√©cessaires au dashboard
    const { profile, authData, isLoading, error, refetch } = useCompleteDashboard()
    
    // ‚úÖ DIAGNOSTIC AUTH - V√©rification compl√®te de l'authentification
    const { 
        isAuthenticated, 
        hasToken, 
        isFullyAuthenticated, 
        verifyToken,
        tokenVerification 
    } = useCompleteAuth()
    
    const [mounted, setMounted] = useState(false)
    const [lastRefresh, setLastRefresh] = useState<Date | null>(null)
    const [authDebug, setAuthDebug] = useState<{
        token: string
        tokenLength: number
        hasToken: boolean
        isAuthenticated: boolean
        isFullyAuthenticated: boolean
        authDataExists: boolean
        authDataAuthenticated: boolean
        tokenVerificationData: unknown
    } | null>(null)


    // Montage du composant
    useEffect(() => {
        setMounted(true)
    }, [])

    // ‚úÖ DIAGNOSTIC AUTH - Collecter les informations d'authentification (sans verifyToken dans les deps)
    useEffect(() => {
        if (mounted) {
            const token = typeof window !== 'undefined' ? sessionStorage.getItem('temp_auth_token') : null
            setAuthDebug({
                token: token ? `${token.substring(0, 20)}...` : 'ABSENT',
                tokenLength: token?.length || 0,
                hasToken,
                isAuthenticated,
                isFullyAuthenticated,
                authDataExists: !!authData,
                authDataAuthenticated: authData?.isAuthenticated,
                tokenVerificationData: tokenVerification.verificationData
            })
        }
    }, [mounted, hasToken, isAuthenticated, isFullyAuthenticated, authData, tokenVerification.verificationData])

    // ‚úÖ Pas d'auto-v√©rification pour √©viter les boucles infinies
    // L'utilisateur peut cliquer sur "V√©rifier le token" manuellement

    // Fonction pour forcer le rafra√Æchissement
    const handleRefresh = async () => {
        setLastRefresh(new Date())
        await refetch()
    }

    // ‚úÖ DIAGNOSTIC VISIBLE - Afficher les informations de debug
    if (!mounted) return <div>Chargement...</div>
    
    if (!hasToken) {
        return (
            <div style={{ padding: '20px', border: '2px solid red', margin: '20px' }}>
                <h2>üö® PROBL√àME D&apos;AUTHENTIFICATION</h2>
                <p><strong>Token absent :</strong> Aucun token trouv√© dans sessionStorage</p>
                <button onClick={() => window.location.href = '/identity/bungie'}>
                    Se connecter
                </button>
                <pre style={{ background: '#', padding: '10px', marginTop: '10px' }}>
                    {JSON.stringify(authDebug, null, 2)}
                </pre>
            </div>
        )
    }
    
    if (isLoading) return <div>R√©cup√©ration des donn√©es...</div>
    if (error) return <div>Erreur: {error}</div>
    
    if (!isAuthenticated || !authData?.isAuthenticated) {
        return (
            <div style={{ padding: '20px', border: '2px solid orange', margin: '20px' }}>
                <h2>‚ö†Ô∏è TOKEN PR√âSENT MAIS INVALIDE</h2>
                <p><strong>Probl√®me :</strong> Token d√©tect√© mais authentification √©chou√©e</p>
                <button onClick={verifyToken}>V√©rifier le token</button>
                <button onClick={() => {
                    sessionStorage.removeItem('temp_auth_token')
                    window.location.reload()
                }}>
                    Supprimer le token et recommencer
                </button>
                <pre style={{ background: '', padding: '10px', marginTop: '10px' }}>
                    {JSON.stringify(authDebug, null, 2)}
                </pre>
            </div>
        )
    }
    
    if (!profile) return <div>Pas de profil agent</div>

    // Dashboard
    return (
        <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
            <h1>Dashboard Agent</h1>
            
            {/* Bouton de test pour v√©rifier la synchronisation du store */}
            <div style={{ marginBottom: '20px', padding: '10px', backgroundColor: '', borderRadius: '8px' }}>
                <h3>üîÑ Test de synchronisation du store</h3>
                <button 
                    onClick={handleRefresh}
                    style={{ 
                        padding: '8px 16px', 
                        backgroundColor: '#007acc', 
                        color: 'white', 
                        border: 'none', 
                        borderRadius: '4px', 
                        cursor: 'pointer',
                        marginRight: '10px'
                    }}
                >
                    Rafra√Æchir les donn√©es
                </button>
                <span>Derni√®re mise √† jour: {lastRefresh ? lastRefresh.toLocaleTimeString() : 'Jamais'}</span>
                <p style={{ fontSize: '12px', margin: '5px 0 0 0' }}>
                    Ce bouton teste si le store Zustand fonctionne correctement dans l&apos;iframe
                </p>
                <div style={{ fontSize: '12px', marginTop: '10px' }}>
                    <p><strong>√âtat des donn√©es optimis√©es:</strong></p>
                    <p>‚úÖ Authentifi√© (local): {authData?.isAuthenticated ? 'Oui' : 'Non'}</p>
                    <p>‚úÖ Authentifi√© (complet): {isFullyAuthenticated ? 'Oui' : 'Non'}</p>
                    <p>ÔøΩ Chargement: {isLoading ? 'Oui' : 'Non'}</p>
                    <p>üë§ Profil pr√©sent: {profile ? 'Oui' : 'Non'}</p>
                    <p>üîë Token pr√©sent: {hasToken ? 'Oui' : 'Non'}</p>
                    <p>ÔøΩ V√©rification token: {tokenVerification.verificationData?.isValid ? '‚úÖ Valide' : '‚ùå Invalide'}</p>
                </div>
            </div>

            <div style={{ marginBottom: '20px' }}>
                <h2>Informations Agent</h2>
                <p><strong>Nom d&apos;agent:</strong> {profile?.agentName || 'Non d√©fini'}</p>
                <p><strong>Nom personnalis√©:</strong> {profile?.customName || 'Non d√©fini'}</p>
                <p><strong>Esp√®ce:</strong> {profile?.species || 'Non d√©finie'}</p>
                <p><strong>R√¥le:</strong> {profile?.role || 'Non d√©fini'}</p>
                <p><strong>Niveau d&apos;autorisation:</strong> {profile?.clearanceLevel || 'Non d√©fini'}</p>
                <p><strong>Groupe:</strong> {profile?.group || 'Non d√©fini'}</p>
                <p><strong>Recrutement vu:</strong> {authData?.hasSeenRecruitment ? '‚úÖ Oui' : '‚ùå Non'}</p>
            </div>

            <div style={{ marginBottom: '20px' }}>
                <h2>üîç Diagnostic d&apos;Authentification</h2>
                <div style={{ backgroundColor: '#f0f8ff', padding: '15px', borderRadius: '8px', border: '1px solid #add8e6' }}>
                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '10px' }}>
                        <div>
                            <p><strong>Token pr√©sent:</strong> {hasToken ? '‚úÖ Oui' : '‚ùå Non'}</p>
                            <p><strong>Auth locale:</strong> {isAuthenticated ? '‚úÖ Oui' : '‚ùå Non'}</p>
                            <p><strong>Auth compl√®te:</strong> {isFullyAuthenticated ? '‚úÖ Oui' : '‚ùå Non'}</p>
                            <p><strong>V√©rification token:</strong> {tokenVerification.verificationData?.isValid ? '‚úÖ Valide' : '‚ùå Invalide/Non v√©rifi√©'}</p>
                        </div>
                        <div>
                            <p><strong>Profile charg√©:</strong> {profile ? '‚úÖ Oui' : '‚ùå Non'}</p>
                            <p><strong>Auth data:</strong> {authData ? '‚úÖ Pr√©sent' : '‚ùå Absent'}</p>
                            <button 
                                onClick={verifyToken}
                                style={{ padding: '5px 10px', marginTop: '10px' }}
                            >
                                üîÑ V√©rifier le token
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div style={{ marginBottom: '20px' }}>
                <h2>üìä Donn√©es Disponibles (Dashboard Optimis√©)</h2>
                <div style={{ backgroundColor: '#f5f5f5', padding: '15px', borderRadius: '8px' }}>
                    <p><strong>‚úÖ Profil agent:</strong> {profile ? 'Charg√©' : 'Non charg√©'}</p>
                    <p><strong>‚úÖ Authentification:</strong> {authData?.isAuthenticated ? 'Valid√©e' : 'Non valid√©e'}</p>
                    <p><strong>‚ùå Donn√©es Bungie:</strong> Supprim√©es du dashboard optimis√©</p>
                    <p><strong>‚ùå Destiny Memberships:</strong> Supprim√©s du dashboard optimis√©</p>
                    <p><em>Note: Pour acc√©der aux donn√©es Bungie/Destiny, utilisez useAuth() complet</em></p>
                </div>
            </div>

            {/* Note: Les param√®tres Protocol n√©cessitent des donn√©es √©tendues non disponibles avec le syst√®me optimis√© */}
            {/* Pour acc√©der aux param√®tres, utilisez useUserStore().agent si n√©cessaire */}

            <div style={{ marginBottom: '20px' }}>
                <h2>üîë Debug Complet</h2>
                <div style={{ backgroundColor: '#f8f8f8', padding: '15px', borderRadius: '8px', border: '1px solid #ddd' }}>
                    <pre style={{ fontSize: '11px', overflow: 'auto', maxHeight: '200px' }}>
                        {JSON.stringify(authDebug, null, 2)}
                    </pre>
                </div>
            </div>

            <div>
                <h2>üéÆ Actions</h2>
                <button
                    onClick={handleRefresh}
                    style={{ marginRight: '10px', padding: '8px 16px' }}
                >
                    Recharger
                </button>
                <button
                    onClick={() => {
                        const token = sessionStorage.getItem('temp_auth_token')
                        if (token) {
                            navigator.clipboard.writeText(token)
                            alert('Token copi√© dans le presse-papier !')
                        } else {
                            alert('Aucun token trouv√©')
                        }
                    }}
                    style={{ marginRight: '10px', padding: '8px 16px', backgroundColor: '#4CAF50', color: 'white' }}
                >
                    üìã Copier Token
                </button>
                <button
                    onClick={() => {
                        const token = sessionStorage.getItem('temp_auth_token')
                        console.log('üîë TOKEN POUR API:', token)
                        console.log('üì° URL API:', process.env.NEXT_PUBLIC_API_URL)
                        console.log('üß™ Exemple curl:')
                        console.log(`curl -H "Authorization: Bearer ${token}" -H "ngrok-skip-browser-warning: true" ${process.env.NEXT_PUBLIC_API_URL}/api/protocol/agent/profile`)
                    }}
                    style={{ marginRight: '10px', padding: '8px 16px', backgroundColor: '#2196F3', color: 'white' }}
                >
                    üîç Afficher Token (Console)
                </button>
                <button
                    onClick={() => {
                        // ‚úÖ Redirection imm√©diate + nettoyage session
                        sessionStorage.removeItem('temp_auth_token')
                        localStorage.removeItem('simple-user-data')
                        window.location.href = '/'
                    }}
                    style={{ padding: '8px 16px', backgroundColor: '#f44336', color: 'white' }}
                >
                    üö™ D√©connexion
                </button>
            </div>

            {/* Note: Avec le syst√®me optimis√©, les contrats, d√©fis et autres donn√©es √©tendues */}
            {/* n√©cessitent des hooks sp√©cifiques ou l'ancien syst√®me useUserStore si n√©cessaire */}
            
            <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f0f8ff', borderRadius: '8px' }}>
                <h3>üí° Dashboard Optimis√©</h3>
                <p>Ce dashboard utilise maintenant des requ√™tes optimis√©es :</p>
                <ul>
                    <li>‚úÖ <strong>Profil agent</strong> : Informations de base seulement</li>
                    <li>‚úÖ <strong>Donn√©es Bungie</strong> : Toutes les informations utilisateur</li>
                    <li>‚úÖ <strong>Destiny Memberships</strong> : Comptes li√©s</li>
                    <li>‚úÖ <strong>Authentification</strong> : Status et permissions</li>
                </ul>
                <p style={{ fontSize: '12px', color: '#666', marginTop: '10px' }}>
                    Pour des donn√©es √©tendues (contrats, d√©fis, tokens), utilisez des hooks sp√©cifiques ou l&apos;ancien syst√®me si n√©cessaire.
                </p>
            </div>
        </div>
    )
}