/**
 * üöÄ OPTIMIS√â: LogoutButton ultra-rapide
 * 
 * Optimisations appliqu√©es:
 * - ‚ùå Pas de useAuth() lourd (√©conomie de ressources)
 * - ‚ùå Pas de router.push() + setTimeout (plus de race conditions)
 * - ‚úÖ Redirection directe window.location.href (plus rapide)
 * - ‚úÖ Nettoyage imm√©diat et complet des tokens
 * - ‚úÖ Hook d√©di√© useLogout() optimis√©
 * 
 * R√©sultat: D√©connexion instantan√©e, 0 d√©lai, plus fiable
 */
'use client'

import { Button } from '@/components/ui/button'
import { useAuthentication } from '@/hooks/useAuthentication'

interface LogoutButtonProps {
    variant?: 'default' | 'outline' | 'ghost'
    size?: 'sm' | 'md' | 'lg'
    children?: React.ReactNode
    className?: string
}

export const LogoutButton = ({ variant = 'outline', children, className }: LogoutButtonProps) => {
    // ‚úÖ OPTIMIS√â: Hook d√©di√© ultra-rapide pour la d√©connexion
    const { logout } = useAuthentication()

    const handleLogout = () => {
        // ‚úÖ IMM√âDIAT: Nettoyage + redirection instantan√©e (plus de setTimeout!)
        logout('/')
    }

    return (
        <Button
            onClick={handleLogout}
            variant={variant}
            className={className}
        >
            {children || 'Se d√©connecter'}
        </Button>
    )
}

export const LogoutButtonWithConfirm = ({ variant = 'outline', children, className }: LogoutButtonProps) => {
    // ‚úÖ OPTIMIS√â: Hook d√©di√© avec confirmation int√©gr√©e
    const { logout } = useAuthentication()
    
    const logoutWithConfirm = (redirectTo?: string) => {
        if (confirm('√ätes-vous s√ªr de vouloir vous d√©connecter ?')) {
            logout(redirectTo)
        }
    }

    const handleLogout = () => {
        // ‚úÖ SIMPLE: Confirmation + d√©connexion en une seule fonction
        logoutWithConfirm('/')
    }

    return (
        <Button onClick={handleLogout} variant={variant} className={className}>
            {children || 'Se d√©connecter'}
        </Button>
    )
}